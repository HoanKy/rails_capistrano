# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5.3-node-browsers
        environment:
          RAILS_ENV: test
          DATABASE_HOST: 127.0.0.1
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
      - image: circleci/postgres:9.6-alpine # database image
        environment: # environment variables for database
          POSTGRES_USER: postgres
          POSTGRES_DB: blog_test
          POSTGRES_PASSWORD: postgres

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs `expr $(cat /proc/cpuinfo | grep -c "cpu cores") - 1` --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run:
          name: Wait for db
          command: dockerize -wait tcp://127.0.0.1:5432 -timeout 1m

      - run: echo "$MASTER_KEY_CI" > config/master.key
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      - run:
          name: run rubocop
          command: bundle exec rubocop .

      # run tests!
      - run:
          name: run tests
          command: |
            bundle exec rspec --format documentation
            # mkdir /tmp/test-results
            # TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            # bundle exec rspec --format progress \
            #                 --out /tmp/test-results/rspec.xml \
            #                 $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
  # deploy:
  #   machine:
  #     enabled: true
  #   steps:
  #     - run:
  #         name: Deploy Over SSH
  #         command: |
  #           ssh $SSH_USER@$SSH_HOST "./deploy.sh"
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      # - deploy:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only: master
